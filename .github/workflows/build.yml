name: Build Binaries

on:
  push:
    tags:
      - '*'  # Only build on tag pushes for releases
  workflow_dispatch:  # Allow manual triggering of the build

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        include:
          - os: ubuntu-latest
            binary_name: sqlwrite-linux.deb
          - os: ubuntu-latest
            binary_name: sqlwrite-linux.rpm
          - os: macos-latest
            binary_name: sqlwrite-mac.pkg

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install dependencies
        run: |
          if [[ "$RUNNER_OS" == "Linux" ]]; then
            sudo apt-get update
            sudo apt-get install -y make curl libcurl4-openssl-dev dpkg-dev rpm
          fi

      - name: Build with Make
        run: make

      - name: Package as .deb on Linux
        if: matrix.os == 'ubuntu-latest'
        run: make deb-package

      - name: Package as .rpm on Linux
        if: matrix.os == 'ubuntu-latest'
        run: make rpm-package

      - name: Package as .pkg on macOS
        if: matrix.os == 'macos-latest'
        run: make pkg

      - name: Upload Linux .deb as artifact
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v3
        with:
          name: sqlwrite-linux.deb
          path: sqlwrite-linux.deb

      - name: Upload Linux .rpm as artifact
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v3
        with:
          name: sqlwrite-linux.rpm
          path: sqlwrite-linux.rpm

      - name: Upload macOS pkg as artifact
        if: matrix.os == 'macos-latest'
        uses: actions/upload-artifact@v3
        with:
          name: sqlwrite-mac.pkg
          path: sqlwrite-mac.pkg

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Download Linux .deb artifact
        uses: actions/download-artifact@v3
        with:
          name: sqlwrite-linux.deb
          path: .

      - name: Download Linux .rpm artifact
        uses: actions/download-artifact@v3
        with:
          name: sqlwrite-linux.rpm
          path: .

      - name: Download macOS pkg artifact
        uses: actions/download-artifact@v3
        with:
          name: sqlwrite-mac.pkg
          path: .

      - name: Delete existing release (if any)
        run: |
           gh release delete "${{ github.ref_name }}" -y || echo "No existing release to delete"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false

      - name: Upload Linux .deb to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./sqlwrite-linux.deb
          asset_name: sqlwrite-linux.deb
          asset_content_type: application/vnd.debian.binary-package

      - name: Upload Linux .rpm to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./sqlwrite-linux.rpm
          asset_name: sqlwrite-linux.rpm
          asset_content_type: application/x-rpm

      - name: Upload macOS pkg to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./sqlwrite-mac.pkg
          asset_name: sqlwrite-mac.pkg
          asset_content_type: application/octet-stream
